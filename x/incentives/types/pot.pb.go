// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/incentives/pot.proto

package types

import (
	fmt "fmt"
	types "github.com/c-osmosis/osmosis/x/lockup/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pot struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Rewards are distributed to lockups that are are returned by at least one of these queries
	DistributeTo types.QueryCondition                     `protobuf:"bytes,2,opt,name=distribute_to,json=distributeTo,proto3" json:"distribute_to"`
	Coins        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
	// condition for lock start time, not valid if unset value
	StartTime        time.Time                                `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	NumEpochs        uint64                                   `protobuf:"varint,5,opt,name=num_epochs,json=numEpochs,proto3" json:"num_epochs,omitempty"`
	FilledEpochs     uint64                                   `protobuf:"varint,6,opt,name=filled_epochs,json=filledEpochs,proto3" json:"filled_epochs,omitempty"`
	DistributedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,7,rep,name=distributed_coins,json=distributedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed_coins"`
}

func (m *Pot) Reset()         { *m = Pot{} }
func (m *Pot) String() string { return proto.CompactTextString(m) }
func (*Pot) ProtoMessage()    {}
func (*Pot) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bf3751e058d24ca, []int{0}
}
func (m *Pot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pot.Merge(m, src)
}
func (m *Pot) XXX_Size() int {
	return m.Size()
}
func (m *Pot) XXX_DiscardUnknown() {
	xxx_messageInfo_Pot.DiscardUnknown(m)
}

var xxx_messageInfo_Pot proto.InternalMessageInfo

func (m *Pot) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Pot) GetDistributeTo() types.QueryCondition {
	if m != nil {
		return m.DistributeTo
	}
	return types.QueryCondition{}
}

func (m *Pot) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *Pot) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Pot) GetNumEpochs() uint64 {
	if m != nil {
		return m.NumEpochs
	}
	return 0
}

func (m *Pot) GetFilledEpochs() uint64 {
	if m != nil {
		return m.FilledEpochs
	}
	return 0
}

func (m *Pot) GetDistributedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.DistributedCoins
	}
	return nil
}

func init() {
	proto.RegisterType((*Pot)(nil), "osmosis.incentives.Pot")
}

func init() { proto.RegisterFile("osmosis/incentives/pot.proto", fileDescriptor_2bf3751e058d24ca) }

var fileDescriptor_2bf3751e058d24ca = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xb1, 0x6e, 0xdb, 0x30,
	0x10, 0xb5, 0x6c, 0x27, 0x45, 0x98, 0xa4, 0x68, 0x88, 0x0e, 0x8a, 0xd1, 0x50, 0x86, 0xbb, 0x78,
	0x09, 0xd9, 0xa4, 0x5b, 0x47, 0x07, 0x1d, 0xb2, 0xb5, 0x46, 0x86, 0xa2, 0x8b, 0x21, 0x89, 0x8c,
	0x42, 0x44, 0xd2, 0x09, 0x22, 0x19, 0xc4, 0x7f, 0x91, 0xef, 0xe8, 0x97, 0x64, 0xcc, 0x58, 0xa0,
	0x40, 0x52, 0xd8, 0x7f, 0xd0, 0x2f, 0x28, 0x48, 0x8a, 0xb0, 0xd1, 0xb9, 0xd3, 0x49, 0xf7, 0xde,
	0xbd, 0x7b, 0x7c, 0x38, 0xf4, 0x0e, 0x54, 0x05, 0x4a, 0x2a, 0x26, 0xeb, 0x5c, 0xd4, 0x5a, 0xde,
	0x09, 0xc5, 0x1a, 0xd0, 0xb4, 0x69, 0x41, 0x03, 0xc6, 0x1d, 0x4a, 0x37, 0xe8, 0xe8, 0x6d, 0x01,
	0x05, 0x38, 0x98, 0xd9, 0x2f, 0xcf, 0x1c, 0x91, 0x02, 0xa0, 0x28, 0x05, 0x73, 0x7f, 0x99, 0xb9,
	0x66, 0xdc, 0xb4, 0xa9, 0x96, 0x50, 0x77, 0x78, 0xf2, 0x2f, 0xae, 0x65, 0x25, 0x94, 0x4e, 0xab,
	0x26, 0x08, 0xe4, 0x6e, 0x17, 0xcb, 0x52, 0x25, 0xd8, 0xdd, 0x59, 0x26, 0x74, 0x7a, 0xc6, 0x72,
	0x90, 0x41, 0xe0, 0x38, 0x18, 0x2d, 0x21, 0xbf, 0x35, 0x8d, 0x2b, 0x1e, 0x9a, 0xfc, 0x1a, 0xa0,
	0xc1, 0x17, 0xd0, 0xf8, 0x35, 0xea, 0x4b, 0x1e, 0x47, 0xe3, 0x68, 0x3a, 0x9c, 0xf7, 0x25, 0xc7,
	0x97, 0xe8, 0x90, 0x4b, 0xa5, 0x5b, 0x99, 0x19, 0x2d, 0x16, 0x1a, 0xe2, 0xfe, 0x38, 0x9a, 0xee,
	0x9f, 0x13, 0x1a, 0x5e, 0xe5, 0xa5, 0xe8, 0x57, 0x23, 0xda, 0xe5, 0x05, 0xd4, 0x5c, 0x5a, 0xc3,
	0xb3, 0xe1, 0xe3, 0x73, 0xd2, 0x9b, 0x1f, 0x6c, 0x46, 0xaf, 0x00, 0xa7, 0x68, 0xc7, 0x7a, 0x51,
	0xf1, 0x60, 0x3c, 0x98, 0xee, 0x9f, 0x1f, 0x53, 0xef, 0x96, 0x5a, 0xb7, 0xb4, 0x73, 0x4b, 0x2f,
	0x40, 0xd6, 0xb3, 0x0f, 0x76, 0xfa, 0xc7, 0x4b, 0x32, 0x2d, 0xa4, 0xbe, 0x31, 0x19, 0xcd, 0xa1,
	0x62, 0xdd, 0xd3, 0x7c, 0x39, 0x55, 0xfc, 0x96, 0xe9, 0x65, 0x23, 0x94, 0x1b, 0x50, 0x73, 0xaf,
	0x8c, 0xbf, 0x21, 0xa4, 0x74, 0xda, 0xea, 0x85, 0x4d, 0x26, 0x1e, 0x3a, 0xab, 0x23, 0xea, 0x63,
	0xa3, 0x21, 0x36, 0x7a, 0x15, 0x62, 0x9b, 0x9d, 0xd8, 0x45, 0x7f, 0x9e, 0x93, 0xa3, 0x65, 0x5a,
	0x95, 0x9f, 0x26, 0x9b, 0xd9, 0xc9, 0xc3, 0x4b, 0x12, 0xcd, 0xf7, 0x5c, 0xc3, 0xd2, 0xf1, 0x09,
	0x42, 0xb5, 0xa9, 0x16, 0xa2, 0x81, 0xfc, 0x46, 0xc5, 0x3b, 0x2e, 0x9f, 0xbd, 0xda, 0x54, 0x9f,
	0x5d, 0x03, 0xbf, 0x47, 0x87, 0xd7, 0xb2, 0x2c, 0x05, 0x0f, 0x8c, 0x5d, 0xc7, 0x38, 0xf0, 0xcd,
	0x8e, 0x74, 0x8f, 0x8e, 0x36, 0x81, 0xf0, 0x85, 0x0f, 0xe3, 0xd5, 0xff, 0x0f, 0xe3, 0xcd, 0xd6,
	0x16, 0xd7, 0x99, 0x5d, 0x3e, 0xae, 0x48, 0xf4, 0xb4, 0x22, 0xd1, 0xef, 0x15, 0x89, 0x1e, 0xd6,
	0xa4, 0xf7, 0xb4, 0x26, 0xbd, 0x9f, 0x6b, 0xd2, 0xfb, 0xce, 0xb6, 0x55, 0x4f, 0xc3, 0x7d, 0x84,
	0x7a, 0xbf, 0x7d, 0xd2, 0x6e, 0x45, 0xb6, 0xeb, 0x62, 0xfc, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff,
	0x6e, 0xd4, 0x09, 0x68, 0xf5, 0x02, 0x00, 0x00,
}

func (m *Pot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DistributedCoins) > 0 {
		for iNdEx := len(m.DistributedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DistributedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FilledEpochs != 0 {
		i = encodeVarintPot(dAtA, i, uint64(m.FilledEpochs))
		i--
		dAtA[i] = 0x30
	}
	if m.NumEpochs != 0 {
		i = encodeVarintPot(dAtA, i, uint64(m.NumEpochs))
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPot(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPot(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.DistributeTo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPot(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintPot(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPot(dAtA []byte, offset int, v uint64) int {
	offset -= sovPot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPot(uint64(m.Id))
	}
	l = m.DistributeTo.Size()
	n += 1 + l + sovPot(uint64(l))
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovPot(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovPot(uint64(l))
	if m.NumEpochs != 0 {
		n += 1 + sovPot(uint64(m.NumEpochs))
	}
	if m.FilledEpochs != 0 {
		n += 1 + sovPot(uint64(m.FilledEpochs))
	}
	if len(m.DistributedCoins) > 0 {
		for _, e := range m.DistributedCoins {
			l = e.Size()
			n += 1 + l + sovPot(uint64(l))
		}
	}
	return n
}

func sovPot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPot(x uint64) (n int) {
	return sovPot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributeTo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributeTo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types1.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochs", wireType)
			}
			m.NumEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilledEpochs", wireType)
			}
			m.FilledEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilledEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPot
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistributedCoins = append(m.DistributedCoins, types1.Coin{})
			if err := m.DistributedCoins[len(m.DistributedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPot
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPot = fmt.Errorf("proto: unexpected end of group")
)
