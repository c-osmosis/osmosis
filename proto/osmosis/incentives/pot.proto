syntax = "proto3";
package osmosis.incentives;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/c-osmosis/osmosis/x/incentives/types";

enum LockQueryType {
  option (gogoproto.goproto_enum_prefix) = false;

  ByDuration = 0; // Queries for locks that are longer than a certain duration
  ByTime = 1; // Queries for lockups that started before a specific time
}

message DistrCondition {
  LockQueryType lock_query_type = 1; // type of lock query, ByLockDuration | ByLockTime
  string denom = 2; // What token denomination are we looking for lockups of
  // condition for lock duration, only valid if positive
  google.protobuf.Duration duration = 3
    [(gogoproto.stdduration) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"duration\""];
  // condition for lock start time, not valid if unset value
  google.protobuf.Timestamp timestamp = 4
    [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"timestamp\""];
}

message Pot {
  uint64 id = 1; // unique ID of a Pot
  // Rewards are distributed to lockups that are are returned by at least one of these queries
  DistrCondition distribute_to = 2 [(gogoproto.nullable) = false];
  repeated cosmos.base.v1beta1.Coin coins = 3
    [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"]; // can distribute multiple coins
  // condition for lock start time, not valid if unset value
  google.protobuf.Timestamp start_time = 4
    [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"start_time\""]; 
  uint64 num_epochs = 5; // number of epochs distribution will be done 
  uint64 filled_epochs = 6; // number of epochs distributed already
  repeated cosmos.base.v1beta1.Coin distributed_coins = 7
    [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"]; // already distributed coins
}
