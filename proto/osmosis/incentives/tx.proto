syntax = "proto3";
package osmosis.incentives;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "osmosis/incentives/pot.proto";

option go_package = "github.com/c-osmosis/osmosis/x/incentives/types";

service Msg {
    rpc CreatePot(MsgCreatePot) returns (MsgCreatePotResponse);
    rpc AddToPot(MsgAddToPot) returns (MsgAddToPotResponse);
}

message MsgCreatePot {
  bytes owner = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  DistrCondition distribute_to = 2 [(gogoproto.nullable) = false]; // distribute condition of a lock which meet one of these conditions
  repeated cosmos.base.v1beta1.Coin coins = 3
    [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"]; // can distribute multiple coins
  // condition for lock start time, not valid if unset value
  google.protobuf.Timestamp start_time = 4
    [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"timestamp\""];
  uint64 num_epochs = 5; // number of epochs distribution will be done
}
message MsgCreatePotResponse {}

message MsgAddToPot {
  bytes owner = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  uint64 pot_id = 2;
  repeated cosmos.base.v1beta1.Coin rewards = 3
    [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}
message MsgAddToPotResponse {}
